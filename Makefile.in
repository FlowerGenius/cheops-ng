#
# Cheops Next Generation
#
# Debugging
DEBUG_FLAGS=# -DDEBUG_DISCOVER -DDEBUG_EVENT -DDEBUG_IO -DDEBUG_SCHEDULER

CFLAGS = @CFLAGS@ -Iadns-1.0/src
LIBS = @LIBS@

CC=@CC@

prefix = @prefix@
exec_prefix = @exec_prefix@
datadir = @datadir@
bindir = @bindir@
mandir = @mandir@
infodir = @infodir@

# According to the comments in install-sh, this won't work for multiple files
# if ./install-sh is what is used.
INSTALL = @INSTALL@

DEFAULT_PATH=$(datadir)/cheops-ng

ifdef DEFAULT_PATH
CFLAGS+=-DDEFAULT_PATH=\"$(DEFAULT_PATH)\"
endif

ifdef COMPILE_STATIC
	LIBS+=/usr/X11R6/lib/libSM.a
	STATIC_FLAGS = -static
endif


# ---------------------------------------------------
# Nothing need be modified below here for normal
# operation
#
# Common Objects
COMOBJS = logger.o misc.o cerror.o cache.o script.o

#used by the agent and sh
NORMOBJS = sched.o cheops-main.o
#used by the gui
GTKOBJS = gui-io.o gui-sched.o gui-event.o gui-help.o gpl.c

# Objects for Cheops Agent
AGENTOBJS = cheops-agent.o agent-discover.o agent-settings.o \
            agent-event.o agent-io.o agent-ip_utils.o agent-osscan.o \
            agent-map.o probe.o agent-probe.o agent-auth.o agent-nmapxml.o 
	
AGENTLIBS = ./adns-1.0/src/libadns.a
AGENTLIBFLAGS = -lm $(LIBS) -L./adns-1.0/src/ -lcrypt

# Objects for Cheops Agent Shell
SHOBJS = event.o io.o cheops-sh.o cheops-sh-guts.o ip_utils.o
SHLIBS = -lreadline -lncurses -lm -lcrypt
SHLIBFLAGS = 

# Objects for Cheops UI
GUIOBJS = cheops-gui.o gui-handlers.o gui-viewspace.o \
          gui-settings.o gui-canvas.o gui-utils.o gui-config.o \
          ip_utils.o cheops-osscan.o gui-dns.o gui-service.o \
          gui-pixmap.o gui-monitoring.o cheops-monitoring.o
	
GTKCFLAGS = `gnome-config --cflags gnome gnomeui glib`
GTKLIBS = `gnome-config  --libs gnome gnomeui glib` $(LIBS) -lcrypt

GLIB = `@GLIB@`

TEST_OBJS = $(NORMOBJS) agent-io.o logger.o misc.o

TESTS = test-sched test-socket test-probe
COMLIBS = #@COMLIBS@
CC_LIBS = 
CFLAGS += -Wall -g -Iadns-1.0/src $(DEBUG_FLAGS) $(GTKCFLAGS)  $(XMLCFLAGS)

ifdef DEBUG
CFLAGS += -DDEBUG_DISCOVER -DDEBUG_MAP -DDEBUG_NMAPXML -DDEBUG_OS_SCAN -DDEBUG_AGENT_PROBE -DDEBUG_CHEOPS_GUI -DDEBUG_EVENT -DDEBUG_CANVAS -DDEBUG_CONFIG -DDEBUG_GUI_HANDLERS -DDEBUG_IO -DDEBUG_PROBE
endif

REVISION = `cat version`

PROGS = cheops-agent cheops-ng
# Additional programs
#PROGS = test-sched test-io cheops-sh

all: version.h installdir.h  ./adns-1.0/src/libadns.a $(PROGS) 

static: version.h $(COMOBJS) $(GUIOBJS) $(GTKOBJS) $(COMLIBS) $(AGENTOBJS) $(AGENTLIBS) $(COMOBJS) $(NORMOBJS) $(COMLIBS)
	rm cheops-ng cheops-agent -f
	$(CC) -o cheops-ng $(COMOBJS) $(GUIOBJS) $(GTKOBJS) $(COMLIBS) $(GTKLIBS) $(CC_LIBS) ./adns-1.0/src/libadns.a $(STATIC_FLAGS) -static 
	$(CC) -o cheops-agent $(COMOBJS) $(AGENTOBJS) $(COMLIBS) $(AGENTLIBS) $(NORMOBJS) $(CC_LIBS) $(AGENTLIBFLAGS) $(GLIB) $(STATIC_FLAGS) -static

strip: cheops-ng cheops-agent
	strip cheops-ng
	strip cheops-agent

tests: $(TESTS)

installdir.h:
	echo "#undef CHEOPS_DIR" >> installdir.h
	echo "#define CHEOPS_DIR \"$(DEFAULT_PATH)"\" >> installdir.h

version:
	echo -n "development" > version

version.h: version
	echo "#ifndef VERSION__H" > version.h
	echo "#define VERSION__H" >> version.h
	echo "#define CHEOPS_VERSION \"`cat version`\"" >> version.h
	echo "#endif" >> version.h

./adns-1.0/src/Makefile: ./adns-1.0/src/Makefile.in
	cd adns-1.0; ./configure

./adns-1.0/src/libadns.a: ./adns-1.0/src/Makefile
	$(MAKE) -C ./adns-1.0/src/

cheops-ng: version.h $(COMOBJS) $(GUIOBJS) $(GTKOBJS) $(COMLIBS)
	$(CC) -o cheops-ng $(COMOBJS) $(GUIOBJS) $(GTKOBJS) $(COMLIBS) $(GTKLIBS) $(CC_LIBS) ./adns-1.0/src/libadns.a $(STATIC_FLAGS)

cheops-agent: version.h $(AGENTOBJS) $(AGENTLIBS) $(COMOBJS) $(NORMOBJS) $(COMLIBS)
	$(CC) -o cheops-agent $(COMOBJS) $(AGENTOBJS) $(COMLIBS) $(AGENTLIBS) $(NORMOBJS) $(CC_LIBS) $(AGENTLIBFLAGS) $(GLIB) $(STATIC_FLAGS)

cheops-sh: $(COMOBJS) $(SHOBJS) $(NORMOBJS) $(COMLIBS)
	$(CC) -o cheops-sh $(COMOBJS) $(SHOBJS) $(COMLIBS) $(SHLIBS) $(NORMOBJS) $(CC_LIBS) $(SHLIBFLAGS)

test-sched: $(TEST_OBJS) test-sched.o
	$(CC) -o test-sched $(TEST_OBJS) $(COMLIBS) test-sched.o

test-io: $(TEST_OBJS) test-io.o
	$(CC) -o test-io $(TEST_OBJS) $(COMLIBS) test-io.o

test-socket: $(TEST_OBJS) test-socket.o
	$(CC) -o test-socket $(TEST_OBJS) $(COMLIBS) test-socket.o

test-probe: $(TEST_OBJS) test-probe.c test-probe.o probe.o
	$(CC) -o test-probe $(TEST_OBJS) $(COMLIBS) test-probe.o probe.o $(GLIB)

gui-event.o: event.c
	$(CC) $(CFLAGS) -c event.c -o gui-event.o $(GTKCFLAGS) -DCOMPILING_GUI

gpl.c: COPYING
	( echo "char *gpl_text = \"\\" ; cat COPYING | sed s/\\\"/\\\\\"/g | awk -v ORS="\\n" '{print $$0"\\" }'; echo "\";" ) >gpl.c

agent-io.o: io.c
	$(CC) $(CFLAGS) -c io.c -o agent-io.o $(CC_LIBS)

agent-event.o: event.c
	$(CC) $(CFLAGS) -c event.c -o agent-event.o $(CC_LIBS)

agent-ip_utils.o: ip_utils.c
	$(CC) $(CFLAGS) -c ip_utils.c -o agent-ip_utils.o $(CC_LIBS) $(GLIB)

dep:
	makedepend *.c $(CFLAGS) $(GTKCFLAGS) -I./

clean:
	rm -f core *.o *~ $(PROGS) gpl.c $(TESTS) version.h installdir.h; \
	if [ -f adns-1.0/Makefile ]; then $(MAKE) -C adns-1.0 clean; fi

distclean: clean
	if [ -f adns-1.0/Makefile ]; then $(MAKE) -C adns-1.0 distclean; fi
	rm -rf Makefile config.log config.h config.status config.log config.cache adns-1.0/Makefile

rebuild: clean
	$(MAKE) all

install: cheops-ng cheops-agent
ifdef DEFAULT_PATH
	mkdir -p $(DEFAULT_PATH)/pixmaps
	$(INSTALL) -d $(DEFAULT_PATH)
	$(INSTALL) -d $(bindir)
	$(INSTALL) -d $(prefix)/share/pixmaps
	$(INSTALL) -m 644 pixmaps/*.xpm $(DEFAULT_PATH)/pixmaps
	$(INSTALL) -m 644 pixmaps/cheops-ng.xpm $(prefix)/share/pixmaps
	$(INSTALL) -s -m 755 -o root -g root cheops-agent $(bindir)
	$(INSTALL) -s -m 755 -o root -g root cheops-ng $(bindir)
	$(INSTALL) -d $(prefix)/share/gnome/apps/Internet
	$(INSTALL) -d $(prefix)/share/gnome/ximian/Programs/Internet
	$(INSTALL) -m 644 cheops-ng.desktop $(prefix)/share/gnome/apps/Internet
	$(INSTALL) -m 644 cheops-ng.desktop $(prefix)/share/gnome/ximian/Programs/Internet
else
	echo "No Default Path in Makefile"
	if [ whoami = "root" ]; then echo "This program requires root privilege" ; fi
endif


# just type "make release-VERSION"
release-%: distclean
	echo "$*" > version
	./autogen.sh
	if [ ! -d ../cheops-ng-$* ]; then mkdir ../cheops-ng-$*; fi
	(tar cf - *) | ( cd ../cheops-ng-$*; tar xf -)
	find ../cheops-ng-$* -type d | grep CVS | xargs rm -rf
	(cd ..; tar -czvf cheops-ng-$*.tgz cheops-ng-$*)
#	cp -f ../cheops-ng-$*.tgz /usr/src/redhat/SOURCES/cheops-ng-$*.tar.gz
#	rpm -bb cheops-ng.spec

# just type "make release-VERSION"
static-release-%: distclean
	echo "$*" > version
	./autogen.sh
	if [ ! -d ../cheops-ng-static-$* ]; then mkdir ../cheops-ng-static-$*; fi
	(tar cf - *) | ( cd ../cheops-ng-static-$*; tar xf -)
	find ../cheops-ng-static-$* -type d | grep CVS | xargs rm -rf
	(cd ..; tar -czvf cheops-ng-static-$*.tgz cheops-ng-static-$*)
#	cp -f ../cheops-ng-static-$*.tgz /usr/src/redhat/SOURCES/cheops-ng-static-$*.tar.gz
#	rpm -bb cheops-ng-static.spec
